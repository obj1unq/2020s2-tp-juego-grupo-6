import config.*
import wollok.game.*
import mainMenu.*
import misiones.*
import player.*
import enemigos.*
import paredes.*
import nivelDeTest.*
import escotilla.*
import direcciones.*
import nave.*

describe "amunqUs Test" {
	
	const tripulante1 = new Tripulante(image = "tVerde.png", position = game.at(6,2))
	const tripulante2 = new Tripulante(image = "tripulanteAmarillo.png", position = game.at(4,6))
	const pared = new Pared()
	const cableado = new Cableado()
	const password = new PasswordCode()
	const medBay = new MedBay()
	const escotilla = new Escotilla(position = game.at(3,5), image = "escotilla.png")
	
	
	fixture {
		game.clear()
		nivelDeTest.iniciar()
		game.addVisual(tripulante1)
		game.addVisual(tripulante2)
		game.addVisualIn(pared, game.at(1,4))
		game.addVisual(cableado)
		game.addVisual(password)
		game.addVisual(medBay)
		game.addVisual(escotilla)
		nave.agregarAccion(tripulante1)
		nave.agregarAccion(tripulante2)
		
	}
	
	test "Actores en el tablero" {
		assert.that(game.hasVisual(player))
		assert.that(game.hasVisual(tripulante1))
		assert.that(game.hasVisual(cableado))
		assert.that(game.hasVisual(tripulante2))
		assert.that(game.hasVisual(password))
		assert.that(game.hasVisual(medBay))	
		assert.that(game.hasVisual(escotilla))
		assert.that(nave.accionesRestantes().contains(tripulante1))
		assert.that(nave.accionesRestantes().contains(tripulante2))
		assert.that(nave.accionesRestantes().contains(cableado))
		assert.that(nave.accionesRestantes().contains(password))
		assert.that(nave.accionesRestantes().contains(medBay))
		assert.that(nave.accionesRestantes().contains(escotilla))
	}
	
	test "posiciones de actores" {
		assert.equals(game.origin(), player.position())
		assert.equals(game.at(1,11), cableado.position())
		assert.equals(game.at(11,11), password.position())
		assert.equals(game.at(0,8), medBay.position())
		assert.equals(game.at(6,2), tripulante1.position())
		
		
	}
	
	test "A jugar!" {
		assert.throwsException({player.irA(izquierda)}) //No se sale de la pantalla.
		assert.throwsException({player.realizarAccion()}) //Nada para atacar ni para sabotear
		player.position(game.at(3,5))
		assert.throwsException({escotilla.serRealizada()}) //No cumlimos todos los requisitos para pasar de nivel
		player.position(game.at(6,2))
		player.realizarAccion()
		assert.that(tripulante1.fueHecha())
		player.position(game.at(4,5))
		player.realizarAccion()
		assert.that(tripulante2.fueHecha()) //El jugador puede asesinar a los tripulantes
		player.position(game.at(1,3))
		assert.throwsException({player.irA(derecha)}) //No se pueden atravesar las paredes
		
		player.position(game.at(1,10))
		player.realizarAccion()
		assert.that(cableado.fueHecha())
		player.position(game.at(11,10))
		password.initialize()
		player.realizarAccion()
		assert.that(password.fueHecha()) 
		nave.accionesRestantes().remove(password) //Bug por inicializar el passwordCode
		player.position(game.at(0,8))
		player.realizarAccion()
		assert.that(medBay.fueHecha())
		player.position(game.at(3,5))
		player.realizarAccion()
        assert.that(nave.sinAccionesRestantes()) //Podemos pasar de nivel
	}
	
}